import torch
from torch.utils.data import Dataset, DataLoader
from torch import nn
from torchvision import transforms
import torchvision
import torch
import numpy as np
import torch.nn.functional as F
import torch.optim as optim
from PIL import Image
from torch import cuda


device = 'cuda' if cuda.is_available() else 'cpu'

transforms_train = transforms.Compose([transforms.Resize((128, 128)),
                                       transforms.RandomRotation(10.),
                                       transforms.ToTensor()])

transforms_test = transforms.Compose([transforms.Resize((128, 128)),
                                      transforms.ToTensor()])

train_data_set = torchvision.datasets.ImageFolder(root = '',transform=transforms_train)
train_loader = DataLoader(train_data_set, batch_size=16, shuffle=True)

test_data_set = torchvision.datasets.ImageFolder(root = '',transform=transforms_test)
test_loader = DataLoader(test_data_set, batch_size=16, shuffle=True)




class Net(nn.Module):

    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.nCov2d(1, 10, kernel_size=5)
        self.conv2 = nn.Conv2d(10, 20, kernel_size=5)
        self.mp = nn.MaxPool2d(2)
        self.fc = nn.Linear(320, 10)

    def forward(self, x):
        in_size = x.size(0)
        x = F.relu(self.mp(self.conv1(x)))
        x = F.relu(self.mp(self.conv2(x)))
        x = x.view(in_size, -1) 
